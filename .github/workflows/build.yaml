name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - preprod
      - develop
    paths-ignore:
      - "doc/**"
      - "README.md"
  pull_request:
    branches:
      - main
      - preprod
      - develop
    types: [opened, synchronize, reopened]

env:
  acrServiceConnection: acrsbsharedservices
  appName: changeme
  apiChartVersion: "0.3.5"
  spaChartVersion: "0.1.3"

  # Setting branch-specific variables with if conditions
  serviceConnector: ${{ github.ref_name == 'main' && 'aks-prod-eastus2' || github.ref_name == 'preprod' && 'aks-prod-eastus2' || 'aks-nonprod-eastus' }}
  environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'preprod' && 'preprod' || 'nonprod' }}
  namespace: ${{ github.ref_name == 'main' && 'changeme-prod' || github.ref_name == 'preprod' && 'changeme-preprod' || 'changeme-nonprod' }}

jobs:
  api-build:
    name: API Build
    runs-on:
      group: sb-runners
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        run: |
          curl -s -L https://dot.net/v1/dotnet-install.sh > dotnet-install.sh 
          chmod +x dotnet-install.sh
          sudo ./dotnet-install.sh --install-dir /var/dotnet --channel 8.0 
          sudo ln -s /var/dotnet/dotnet /usr/local/bin/dotnet
          echo "dotnet location: $(which dotnet)"
          echo "dotnet version: $(dotnet --version)"
          dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name "github" "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Restore .NET packages
        run: dotnet restore service/SE.Sustainability.Template.sln

      - name: Build .NET project
        run: dotnet build service/SE.Sustainability.Template.sln -o .build

      - name: Run Unit Tests
        run: dotnet test service/SE.Sustainability.Template.API/SE.Sustainability.Template.API.csproj --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}" --filter "FullyQualifiedName!~Integration&FullyQualifiedName!~Shared&Category!=integration" --collect:"XPlat Code Coverage"

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-results-${{ matrix.dotnet-version }}
          path: TestResults-${{ matrix.dotnet-version }}
        if: ${{ always() }}

      - name: Publish Coverage Report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results
          path: coverage-results

      - name: Setup Docker
        uses: SE-Sustainability-Business/sbaction-dockersetup@v1

      - name: Docker Build API
        run: |
          docker build -t acrsbsharedservices.azurecr.io/${{env.appName}}-api:${{ env.image_tag }} -f .cicd/service/Dockerfile .
          echo "API Docker Image Built with Tag: ${{ env.image_tag }}"

      - name: Docker Push API
        run: |
          docker push acrsbsharedservices.azurecr.io/${{env.appName}}-api:${{ env.image_tag }}

  spa-build:
    name: UI Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install Dependencies
        run: npm ci
        working-directory: app

      - name: Run Prettier
        run: npm run prettier
        working-directory: app

      - name: Run Lint
        run: npm run lint
        working-directory: app

      - name: Run Tests
        run: npm run test:ci
        working-directory: app

      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/coverage/TESTS-*.xml

      - name: Publish Code Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results
          path: app/coverage/cobertura-coverage.xml

      - name: Build UI
        run: npm run build -- -c=production
        working-directory: app

      - name: Docker Build UI
        run: |
          docker build -t ${{ secrets.ACR_SERVICE_CONNECTION }}/${{ env.appName }}-ui:${{ github.sha }} -f .cicd/app/Dockerfile .
        shell: bash

      #- name: Docker Push UI
      #  run: |
      #    echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
      #    docker push ${{ secrets.ACR_SERVICE_CONNECTION }}/${{ env.appName }}-ui:${{ github.sha }}
      #  shell: bash

  #deploy:
  #   name: Deploy to Cluster
  #   runs-on: ubuntu-latest
  #   needs: [api-build, spa-build]
  #   if: github.ref_name == 'main' || github.ref_name == 'preprod' || github.ref_name == 'develop'
  #   env:
  #     tag: ${{ needs.calculate-tag.outputs.tag }}
  #   steps:
  #     - name: Helm Repo Add and Update
  #       run: |
  #         helm repo add sb https://${{ secrets.GH_TOKEN }}@raw.githubusercontent.com/SE-Sustainability-Business/helm-repository/main
  #         helm repo update

  #     - name: Helm Deploy API
  #       run: |
  #         helm upgrade --install $(appName)-api sb/dotnet-api \
  #           --namespace $(namespace) \
  #           --values .cicd/service/helm-vals/$(environment).yaml \
  #           --set image.tag=${{ env.tag }} \
  #           --wait --timeout 10m0s

  #     - name: Helm Deploy UI
  #       run: |
  #         helm upgrade --install $(appName)-ui sb/spa \
  #           --namespace $(namespace) \
  #           --values .cicd/app/helm-vals/$(environment).yaml \
  #           --set image.tag=${{ env.tag }} \
  #           --wait --timeout 10m0s
